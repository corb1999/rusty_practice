// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// graveyard below %%%%%%%%%%%%%%%%%%%%%%%%%%
    /* 

                          \\/
     ▒▒          ▒▒▒▒▒▒▒▒      ▒▒▒▒▒▒▒▒          ▒▒
   ▒▒▒▒  ▒▒    ▒▒        ▒▒  ▒▒        ▒▒    ▒▒  ▒▒▒▒
   ▒▒▒▒  ▒▒  ▒▒            ▒▒            ▒▒  ▒▒  ▒▒▒▒
 ░░▒▒▒▒░░▒▒  ▒▒            ▒▒            ▒▒  ▒▒░░▒▒▒▒
   ▓▓▓▓▓▓▓▓  ▓▓      ▓▓██  ▓▓  ▓▓██      ▓▓  ▓▓▓▓▓▓▓▓
     ▒▒▒▒    ▒▒      ████  ▒▒  ████      ▒▒░░  ▒▒▒▒
       ▒▒  ▒▒▒▒▒▒        ▒▒▒▒▒▒        ▒▒▒▒▒▒  ▒▒
         ▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒▒▒▓▓▒▒▓▓▒▒▒▒▒▒▒▒
           ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
             ▒▒▒▒▒▒▒▒▒▒██▒▒▒▒▒▒██▒▒▒▒▒▒▒▒▒▒
           ▒▒  ▒▒▒▒▒▒▒▒▒▒██████▒▒▒▒▒▒▒▒▒▒  ▒▒
         ▒▒    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒    ▒▒
       ▒▒    ▒▒    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒    ▒▒    ▒▒
       ▒▒  ▒▒    ▒▒                  ▒▒    ▒▒  ▒▒
           ▒▒  ▒▒                      ▒▒  ▒▒

// section 15.6.2 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let leaf1 = Rc::new(Node {
        value: 3, 
        parent: RefCell::new(Weak::new()), 
        children: RefCell::new(vec![]), 
    }); 
    println!("leaf parent = {:?}", leaf1.parent.borrow().upgrade()); 

    println!("leaf strong count = {}, weak count = {}", Rc::strong_count(&leaf1), Rc::weak_count(&leaf1)); 

    let branch1 = Rc::new(Node {
        value: 5, 
        parent: RefCell::new(Weak::new()), 
        children: RefCell::new(vec![Rc::clone(&leaf1)]), 
    });

    *leaf1.parent.borrow_mut() = Rc::downgrade(&branch1); 
    println!("leaf parent = {:?}", leaf1.parent.borrow().upgrade()); 

#[derive(Debug)]
struct Node {
    value: i32, 
    parent: RefCell<Weak<Node>>, 
    children: RefCell<Vec<Rc<Node>>>, 
}

// section 15.6.1 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

use crate::List::*; 


    let a = Rc::new(Cons(5, RefCell::new(Rc::new(Nil)))); 

    println!("a init Rc count = {}", Rc::strong_count(&a)); 
    println!("a next item = {:?}", a.tail()); 

    let b = Rc::new(Cons(10, RefCell::new(Rc::clone(&a)))); 

    println!("a Rc count w/ b created = {}", Rc::strong_count(&a)); 
    println!("b init Rc count = {}", Rc::strong_count(&b)); 
    println!("b next item = {:?}", b.tail()); 

    if let Some(link) = a.tail() {
        *link.borrow_mut() = Rc::clone(&b); 
    }

    println!("b Rc count after changing a = {}", Rc::strong_count(&b)); 
    println!("a Rc count w/ changing a = {}", Rc::strong_count(&a)); 

    // the following line will overflow the stack
    // println!("a next item (overflow incoming) = {:?}", a.tail()); 

#[derive(Debug)]
enum List {
    Cons(i32, RefCell<Rc<List>>), 
    Nil, 
}

impl List {
    fn tail(&self) -> Option<&RefCell<Rc<List>>> {
        match self {
            Cons(_, item) => Some(item), 
            Nil => None, 
        }
    }
}


// section 15.5 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let x = 5;
    // let y = &mut x; // will not compile if x is immutable

// in lib.rs
pub trait Messenger {
    fn send(&self, msg: &str); 
}

pub struct LimitTracker<'a, T: Messenger> {
    messenger: &'a T, 
    value: usize, 
    max: usize, 
}

impl<'a, T> LimitTracker<'a, T> 
where T: Messenger,  {
    pub fn new(messenger: &'a T, max: usize) -> LimitTracker<'a, T> {
        LimitTracker { messenger, value: (0), max, }
    }

    pub fn set_value(&mut self, value: usize) {
        self.value = value; 

        let percentage_of_max = self.value as f64 / self.max as f64; 

        if percentage_of_max >= 1.0 {
            self.messenger.send("error, you're over API call quota");
        } else if percentage_of_max >= 0.9 {
            self.messenger.send("approaching API call quota limit"); 
        } else if percentage_of_max >= 0.5 {
            self.messenger.send("half of API call quota used"); 
        }
    }
}

#[cfg(test)]
mod tests {
    use std::cell::RefCell;
    use super::*;

    struct MockMessenger {
        //sent_messages: Vec<String>, // will not help compile
        sent_messages: RefCell<Vec<String>>, 
    }

    impl MockMessenger {
        fn new() -> MockMessenger {
            //MockMessenger { sent_messages: vec![], } // will not help compile
            MockMessenger { sent_messages: RefCell::new(vec![]), }
        }
    }

    impl Messenger for MockMessenger {
        fn send(&self, msg: &str) {
            //self.sent_messages.push(String::from(msg)); // fails to compile
            self.sent_messages.borrow_mut().push(String::from(msg));  
        }
    }

    #[test]
    fn it_sends_halfway_api_quota_mgs() {
        let mock_msg = MockMessenger::new(); 
        let mut lim_track = LimitTracker::new(&mock_msg, 100); 

        lim_track.set_value(53); 

        //assert_eq!(mock_msg.sent_messages.len(), 1); // will not help compile
        assert_eq!(mock_msg.sent_messages.borrow().len(), 1); 
    }
}


// section 15.4 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

use crate::List::*;
use crate::Listy::*;

    let a = Cons(5, Box::new(Cons(10, Box::new(crate::List::Nil)))); 
    let b = Cons(3, Box::new(a)); 
    //let c = Cons(4, Box::new(a)); //wont compile because trying to borrow moved val
    print!("B is {:?}. ", &b); 

    let aa = Rc::new(Conn(5, Rc::new(Conn(10, Rc::new(crate::Listy::Nil))))); 
    let bb = Conn(3, Rc::clone(&aa)); 
    let cc = Conn(4, Rc::clone(&aa)); 
    print!("AA is {:?}. ", &aa);
    print!("BB is {:?}. ", &bb);
    print!("CC is {:?}. ", &cc);

    let aaa = Rc::new(Conn(5, Rc::new(Conn(10, Rc::new(crate::Listy::Nil))))); 
    println!("Count after creating aaa = {}", Rc::strong_count(&aaa)); 
    let bbb = Conn(3, Rc::clone(&aaa)); 
    println!("Count after creating bbb = {}", Rc::strong_count(&aaa)); 
    {
        let ccc = Conn(4, Rc::clone(&aaa)); 
        println!("Count after creating ccc = {}", Rc::strong_count(&aaa)); 
    }
    println!("Count after ccc out of scope = {}", Rc::strong_count(&aaa)); 
    
#[derive(Debug)]
enum List {
    Cons(i32, Box<List>), 
    Nil, 
}

#[derive(Debug)]
enum Listy {
    Conn(i32, Rc<Listy>), 
    Nil, 
}


// section 15.3 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let c = CustomSmartPoint {
        data: String::from("stuff"), 
    }; 
    let d = CustomSmartPoint {
        data: String::from("other stuff"), 
    }; 
    println!("Custom smart pointers are created: {:?}, and {:?}", c, d); 
    // c.drop(); // will not compile bc no explicit destructor calls
    drop(c); 
    println!("-------- End of the main fun -------- "); 

#[derive(Debug)]
struct CustomSmartPoint {
    data: String, 
}

impl Drop for CustomSmartPoint {
    fn drop(&mut self) {
        println!("Dropping data with custom smart pointer '{}'", self.data); 
    }
}

// section 15.2 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

use std::ops::Deref;

    let x = 5; 
    let y = Box::new(x); 
    assert_eq!(5, x); 
    assert_eq!(5, *y);
    // this results in a compile error: assert_eq!(5, y); 

    let z = BoxFromScratch::new(x);
    assert_eq!(5, *z); 

    let me = BoxFromScratch::new(String::from("Rusty"));
    hello(&me); 

struct BoxFromScratch<T>(T);

impl<T> BoxFromScratch<T> {
    fn new(x: T) -> BoxFromScratch<T> {
        BoxFromScratch(x)
    }
}

impl<T> Deref for BoxFromScratch<T> {
    type Target = T;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

fn hello(name: &str) {
    println!("Hello {}!", name); 
}


// section 15.1 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

use crate::List::*;

    let a = 5; 
    let b = Box::new(5);
    println!("A is {} and B is {}", a, b);    

    let list1 = Cons(1, Box::new(Cons(2, Box::new(Cons(3, Box::new(Nil))))));
    println!("{:?}", list1);

#[derive(Debug)]
enum List {
    Cons(i32, Box<List>), 
    Nil, 
}

// section 13.2 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    let v1: Vec<i32> = vec![1, 2, 3]; 

    let v2: Vec<_> = v1.iter().map(|x| x + 1).collect(); 

    assert_eq!(v2, vec![2, 3, 4]); 
    println!("{:?} ... {:?}", v1, v2);


//lib.rs
#[test]
fn iterator_demo() {
    let v1 = vec![1, 2, 3]; 
    let mut v1_iter = v1.iter(); 

    assert_eq!(v1_iter.next(), Some(&1));
    assert_eq!(v1_iter.next(), Some(&2));
    assert_eq!(v1_iter.next(), Some(&3));
    assert_eq!(v1_iter.next(), None);
}

//lib.rs
#[test]
fn iterator_sum() {
    let v1 = vec![1, 2, 3]; 
    let v1_iter = v1.iter(); 
    let total: i32 = v1_iter.sum(); 

    assert_eq!(total, 6); 
}

//lib.rs
#[derive(Debug, PartialEq)]
struct Shoe {
    size: u32, 
    style: String, 
}

fn shoes_in_sizes(arg_shoes: Vec<Shoe>, arg_shoe_size: u32) -> Vec<Shoe> {
    arg_shoes.into_iter().filter(|s| s.size == arg_shoe_size).collect()
}

//lib.rs
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn filters_by_size() {
        let shoes = vec![
            Shoe {
                size: 10, 
                style: String::from("sneaker"), 
            }, 
            Shoe {
                size: 13, 
                style: String::from("sandal"), 
            }, 
            Shoe {
                size: 10, 
                style: String::from("boot"), 
            }, 
        ]; 

        let in_my_size = shoes_in_sizes(shoes, 10); 

        assert_eq!(in_my_size, 
            vec![
            Shoe {
                size: 10, 
                style: String::from("sneaker"), 
            }, 
            Shoe {
                size: 10, 
                style: String::from("boot"), 
            }, 
        ]
        )
    }
}


// section 13.1 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let store = Inventory {
      shirts: vec![ShirtColor::Blue, ShirtColor::Red, ShirtColor::Blue], 
    };

    let user_pref1 = Some(ShirtColor::Red);
    
    let giveaway1 = store.giveaway(user_pref1); 

    println!("User with preference {:?} gets {:?}", user_pref1, giveaway1); 

    let user_pref2 = None; 
    let giveaway2 = store.giveaway(user_pref2); 
    println!("User with preference {:?} gets {:?}", user_pref2, giveaway2); 

    println!("-------------");

    let expensive_closure = |num: u32| -> u32 {
      println!("calculating slowly bruv...");
      std::thread::sleep(Duration::from_secs(2));
      num
    };


    let list = vec![1, 2, 3]; 
    println!("Before closure defined... {:?}", list); 

    let only_borrows = || println!("From closure: {:?}", list); 

    println!("Closure defined but not called... {:?}", list); 
    only_borrows(); 
    println!("Closure is now called so... {:?}", list);

    println!("-------------");
    
    let mut list2 = vec![1, 2, 3]; 
    println!("Before closure defined... {:?}", list2);

    let mut borrow_mutably = || list2.push(7); 

    borrow_mutably(); 
    println!("Closure is now called so... {:?}", list2);

    println!("-------------");

    let mut list3 = [
      Rectangle { width: 10, height: 1}, 
      Rectangle { width: 3, height: 5}, 
      Rectangle { width: 7, height: 12}, 
    ];

    list3.sort_by_key(|r| r.width); 
    println!("{:#?}", list3); 

#[derive(Debug, PartialEq, Copy, Clone)]
enum ShirtColor {
    Red, 
    Blue, 
}

struct Inventory {
  shirts: Vec<ShirtColor>, 
}

impl Inventory {
    fn giveaway(&self, user_preference: Option<ShirtColor>) -> ShirtColor {
        user_preference.unwrap_or_else(|| self.most_stocked())
    }

    fn most_stocked(&self) -> ShirtColor {
        let mut num_red = 0; 
        let mut num_blue = 0;

        for color in &self.shirts {
          match color {
            ShirtColor::Red => num_red += 1, 
            ShirtColor::Blue => num_blue += 1, 
          }
        }

        if num_red > num_blue {
            ShirtColor::Red
        } else {
          ShirtColor::Blue
        }
    }
}

#[derive(Debug)]
struct Rectangle {
  width: u32, 
  height: u32, 
}

// section 11 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

// lib.rs file code below...
fn silly_function(a: i32) -> i32 {
    println!("I am number {}", a); 
    10
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn passing_test() {
        let val = silly_function(3); 
        assert_eq!(10, val); 
    }

    #[test]
    fn failing_test() {
        let val: i32 = silly_function(10);
        assert_eq!(3, val); 
    }

    #[test]
    #[ignore]
    fn really_difficult_expensive_test() {
        // really lengthy and costly time test
    }
}

// section 10.3 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let string1 = String::from("abcd");
    let string2 = "xyz";
    let result = longest(string1.as_str(), string2);
    println!("The longest string is {}", result);

    let novel = String::from("Call me Ishmael. Some years ago, I was a dork."); 
    let first_sentence = novel.split('.').next().expect("Could not find a dot"); 
    let i = ImportantExcerpt {
        part: first_sentence, 
    }; 
    println!("{:?}", i); 

    let s: &'static str = "I have a static lifetime.";
    println!("{}", s); 

#[derive(Debug)]
struct ImportantExcerpt<'a> {
    part: &'a str, 
}

fn longest<'a>(first_one: &'a str, second_one: &'a str) -> &'a str {
    if first_one.len() > second_one.len() {
        first_one
    } else {
        second_one
    }
}

// section 10.2 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let number_list = vec![34, 50, 25, 100, 65];

    let result = largest(&number_list);
    println!("The largest number is {}", result);

    let char_list = vec!['y', 'm', 'a', 'q'];

    let result = largest(&char_list);
    println!("The largest char is {}", result);

fn largest<T: PartialOrd + Copy>(list: &[T]) -> T {
    let mut largest = list[0];
    for &item in list {
        if item > largest {
            largest = item;
        }
    }
    largest
}

// section 9.3 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let ff = File::open("does_not_exist.txt"); 
    let ff1 = File::open("readme.md"); 
    // force the compiler to tell us if the above was successful by purposely setting to the wrong type
    // let ff: u8 = File::open("does_not_exist.txt"); 

    let ff1 = match ff1 {
        Ok(file) => file, 
        Err(error) => panic!("Problem with file: {:?}", error)
    }; 
    let ff = match ff {
        Ok(file) => file, 
        Err(error) => match error.kind() {
            ErrorKind::NotFound => match File::create("does_not_exist.txt") {
                Ok(fc) => fc, 
                Err(e) => panic!("Screwup here {:?}", e)
            }, 
            other_error => {
                panic!("Problemo here {:?}", other_error)
            }
        }, 
    }; 

    // let fff = File::open("wazzup.txt").unwrap(); 
    let fff = File::open("wazzup.txt").expect("error msg here bro"); 

// section 9.1 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    std::env::set_var("RUST_BACKTRACE", "1");

    let vv = vec![1, 2, 3]; 
    vv[99]; 

    panic!("die here");

// section 8.3 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let mut scores = HashMap::new();
    scores.insert(String::from("red"), 10); 
    scores.insert(String::from("blue"), 20); 

    let team_name = String::from("blue");
    let team_score = scores.get(&team_name);
    println!("{:?}", team_score);

    println!("{:?}", scores);
    scores.insert(String::from("blue"), 25); 
    println!("{:?}", scores);
    scores.entry(String::from("yellow")).or_insert(5); 
    println!("{:?}", scores);
    scores.entry(String::from("red")).or_insert(15); // red exists so wont insert 
    println!("{:?}", scores);


// section 8.2 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let mut s1 = String::new();
    println!("nada = {}", s1);
    let phrase = "howdy"; 
    let s1 = phrase.to_string(); 
    println!("{}", s1);
    let s1 = "yo".to_string(); 
    println!("{}", s1);

    let mut s2 = String::from("howdy"); 
    s2.push_str(" neighbor"); 
    println!("{}", s2);

    for i in "hello".chars() {
        println!("{}", i)
    }; 
    for i in "hello".bytes() {
        println!("{}", i)
    }; 

// section 8.1 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let mut v: Vec<i32> = Vec::new(); 
    let v2 = vec![1, 2, 3, 4, 5]; 
    v.push(5); 
    v.push(9); 

    let third: &i32 = &v2[2]; 
    println!("Element 3 is {}", third); 
    match v2.get(2) {
        Some(third) => println!("Third elem is {}", third), 
        None => println!("No third element"), 
    }

    let mut v3 = vec![3, 2, 1]; 
    for foo in &v3 {
        println!("Countdown {}", foo); 
    }
    for foo in &mut v3 {
        *foo *= 2; 
        println!("multi {}", foo);
    }

    enum Excel {
        Int(i32), 
        Float(f64), 
        Text(String), 
    }
    let row = vec![
        Excel::Int(3), 
        Excel::Float(2.22), 
        Excel::Text(String::from("Blue")), 
    ];

    v3.truncate(2); 
    for foo in &v3 {
        println!("modifying vectors {}", foo); 
    }
    v3.insert(1, 5); 
    println!("vec length {}", v3.len()); 

// section 6.3 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let config_max = Some(3u8);
    if let Some(max) = config_max {
        println!("the max is config to {}", max);
    }

// section 6.2 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let x = Coin::Penny;
    let y = value_in_cents(x);
    println!("value of x is {}", y);

    value_in_cents(Coin::Quarters(UsState::Alabama));

    fn plus_one(x: Option<i32>) -> Option<i32> {
        match x {
            None => None, 
            Some(i) => Some(i + 1), 
        }
    }
    let five = Some(5); 
    let six = plus_one(five); 
    let none = plus_one(None);

enum Coin {
    Penny, 
    Nickel, 
    Dime, 
    Quarter, 
    Quarters(UsState), 
    FiddyCent, 
}

#[derive(Debug)]
enum UsState {
    Alabama, 
    Alaska, 
}

fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => {
            println!("Lucky penny found!");
            1
        }, 
        Coin::Nickel => 5, 
        Coin::Dime => 10, 
        Coin::Quarter => 25, 
        Coin::Quarters(state) => {
            println!("State quarter from {:?}", state); 
            25
        }
        other => 0, // handles all other cases like the discontinued fifty cent piece i added to enum 
    }
}

// section 6.1 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let four = IpAddKind::V4; 
    let six = IpAddKind::V6;

    let home = IpAddr::V4(127, 0, 0, 1);
    let loopback = IpAddr::V6(String::from("::1"));

    /* enum Option<T> {
        None, 
        Some(T), 
    } */

    let some_number = Some(5); // Option<i32>
    let some_string = Some("a string"); // Option<&str>
    let absent_number: Option<i32> = None; 

enum IpAddKind {
    V4, 
    V6, 
}

fn route(ip_kind: IpAddKind) {}

enum IpAddr {
    V4(u8, u8, u8, u8), 
    V6(String), 
}

// example how enum variants can have diff data types
enum Message {
    Quit, 
    Move { x: i32, y: i32 }, 
    Write(String), 
    ChangeColor(i32, i32, i32), 
}

// section 5.3 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };
    println!(
        "The area of the rectangle is {} square pixels.",
        rect1.area()
    );

    let rect2 = Rectangle {
        width: 10,
        height: 40,
    };
    let rect3 = Rectangle {
        width: 60,
        height: 45,
    };
    println!("Can rect1 hold rect2? {}", rect1.can_hold(&rect2));
    println!("Can rect1 hold rect3? {}", rect1.can_hold(&rect3));
    println!("Can rect3 hold rect2? {}", rect3.can_hold(&rect2));

    let sq = Rectangle::square(8);
    println!("Square length is {} and height is {}", 
                sq.width, sq.height);

#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}
// this is a method
impl Rectangle {
    fn area(&self) -> u32 {
        self.width * self.height
    }
    fn can_hold(&self, other: &Rectangle) -> bool {
        self.width > other.width && self.height > other.height
    }
    fn square(size: u32) -> Rectangle {
        Rectangle {
            width: size, 
            height: size, 
        }
    }
}


// section 5.2 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let rect1 = Rectangle {
        width: 30, 
        height: 50, 
    };
    println!("Area of given rect is {}", 
                area(&rect1));

struct Rectangle {
    width: u32, 
    height: u32, 
}

fn area(rectangle: &Rectangle) -> u32 {
    rectangle.width * rectangle.height
}

// section 5.1 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let mut user1 = User {
        email: String::from("me@email.gov"), 
        username: String::from("howdy"), 
        active: true, 
        sign_in_count: 1, 
    };
    println!("user1 email is {}", user1.email);
    user1.email = String::from("you@email.gov");
    println!("email updated to {}", user1.email);

    let user2 = build_user(String::from("u2@me.org"), 
                            String::from("Iluvyou"));
    println!("user number 2 email is {}", user2.email);

    let user3 = User {
        email: String::from("mr3@user.com"), 
        ..user1
    };
    println!("user number 3 email is {}", user3.email);
    //  println!("user number 1 email is {}", user1.username); based on this code, user1's username is overwritten when user 3 was created
    println!("user number 2 uname is {}", user2.username);

    let black = Color(0, 0, 0);
    let origin = Pointxy(0, 0); 
    println!("color black second digit is {}", black.1);
    println!("point origin x is {}", origin.0);

struct User {
    active: bool, 
    username: String,
    email: String,
    sign_in_count: u64,  
}

fn build_user(email: String, username: String) -> User {
    User {
        email, 
        username, 
        active: true, 
        sign_in_count: 1, 
    }
}

struct Color(i32, i32, i32);
struct Pointxy(i32, i32);


// section 4.3 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let x = b' ';
    println!("byte literal for a space is {}", x);

    let s = String::from("hello world");
    println!("{}", s);
    let slice = &s[0..5];
    println!("{}", slice);
    let slice = &s[..5];
    println!("{}", slice);
    let slice = &s[6..];
    println!("{}", slice);
    let lenn = s.len();
    let slice = &s[6..lenn];
    println!("{}", slice);
    let slice = &s[..];
    println!("{}", slice);

    let stringy = "hello wordle";
    let printy = first_word(&stringy[..]);
    println!("{} but first, {}", stringy, printy);

    let a = [1, 2, 3, 4, 5];
    let crops = &a[1..2];

fn first_word(s: &str) -> &str {
    let bytes = s.as_bytes();
    for (i, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return &s[0..i];
        }
    }
    &s[..]
}


// section 4.2 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    let s1 = String::from("hello");
    let len = calculate_length(&s1);
    println!("The length of '{}' is {}.", s1, len);
    
    let mut s = String::from("hello");
    change(&mut s);
    println!("{}", s);

    {
        let r1 = &mut s;
        println!("{}", r1);
    } // r1 goes out of scope here, so we can make a new reference with no problems.
    let r1 = &s; // no problem
    let r2 = &s; // no problem
    println!("{} and {}", r1, r2);
    // variables r1 and r2 will not be used after this point

    let r3 = &mut s; // no problem
    println!("{}", r3);

fn calculate_length(s: &String) -> usize {
    s.len()
}

fn change(some_string: &mut String) {
    some_string.push_str(", world");
}

// section 4.1 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    {
    let mut s = String::from("hello");
    s.push_str(", world"); 
    println!("{}", s);
    }

    let x = String::from("hello"); 
    let y = x.clone();
    println!("x = {}, y = {}", x, y); 

    
// section 3.5 @@@@@@@@@@@@@@@@@@@@@@@@@@

    let numero = 2;

    if numero % 2 == 0 {
        println!("Divisible by 2");
    } else if numero % 3 == 0 {
        println!("Divisible by 3");
    } else {
        println!("Condition false");
    }

    let condy = false;
    let numero = if condy { 99 } else { 98 };
    println!("{}", numero);

    /*loop {
        println!("Im LOOPING bruv! CTRL+C to KILL");
    }*/

    let mut count = 0;
    'counting_up: loop {
        println!("count = {}", count);
        let mut remaining = 10;
        loop {
            println!("remaining = {}", remaining);
            if remaining == 9 {
                break;
            }
            if count == 3 {
                break 'counting_up;
            }
            remaining -= 1;
        }
        count += 1;
    }
    println!("End count = {}", count);

    let mut counter = 0;
    let result = loop {
        counter += 1;
        if counter == 100 {
            break counter;
        }
    };
    println!("Counter Loop Completed @ {}", result);

    let mut numero = 3; 
    while numero != 0 {
        println!("{}", numero);
        numero -= 1; 
    }
    println!("BANG");

    let a = [10, 20, 30, 40 , 50];
    let mut index = 0;
    while index < 5 {
        println!("the array val @ index {} is {}", index, a[index]);
        index += 1;
    } // fragile and should be converted to for, like below

    let a = [10, 20, 30, 40 , 50, 60 , 70, 1];
    for element in a {
        println!("the array val is {}", element)
    }

    for nummm in (1..6).rev() {
        println!("{}", nummm);
    }
    println!("BANGG");

    // fibonnaci function test
    fn fib(n: u8) -> u64 {
        let mut prev: u64 = 0;
        let mut curr: u64 = 1;
        for _ in 1..n {
            let next = prev + curr;
            prev = curr;
            curr = next;
        }
        curr
    }
    println!("{}", fib(10));


// section 3.3 @@@@@@@@@@@@@@@@@@@@@

    learning_fun(3, 'b');

    let z = learning_fun_more(6);
    println!("Val is {}", z);

fn learning_fun(x: u8, unit_label: char) {
    println!("Look at me learn functions!");

    let y: u8 = x + 1;

    println!("Value of x is {}{}", y, unit_label);
}

fn learning_fun_more(x: u8) -> u8 {
    x + 1
}


// section 3.2 @@@@@@@@@@@@@@@@@@@@@
    
    let barf: f64 = 8.942 + 3.0;
    println!("Value = {}", barf);

    let barf: i8 = 13;
    println!("Value = {}", barf);

    let barf: bool = true;
    println!("Value = {}", barf);

    let barf = 'b';
    println!("Value = {}", barf);

    let barf = '😻';
    println!("Value = {}", barf);

    let barf: (i32, f64, u8) = (500, 6.4, 1);
    let (_x, y, _z) = barf;
    println!("Value = {}", y);
    println!("Value = {}", barf.0);

    let barf = [1, 2, 3, 4, 5];
    println!("Value = {}", barf[1]);
    let barf: [i32; 5] = [0; 5];
    println!("Value = {}", barf[1]);
    let barf: [bool; 5] = [false; 5];
    println!("Value = {}", barf[1]);
    let months = ["January", "February", "March", 
                    "April", "May", "June", "July",
                    "August", "September", "October", 
                    "November", "December"];
    println!("Value = {}", months[0]);

    
// section 3.1 @@@@@@@@@@@@@@@@@@@@@
    let x = 5;
    println!("The val of x is {}", x);
    let x = x + 1; 
    println!("The val of x is {}", x);

    {
        let x = x * 2;
        println!("Inner scope x value is {}", x)
    }

    println!("The val of x is {}", x);

    let spaces_str = "       ";
    let spaces_num = spaces_str.len();
    println!("Number of spaces is {}", spaces_num);

    const FART: i32 = 7 + 8 - 10 * 90;
    println!("The constant is value {}", FART);    
    
*/